methods: [
  {
    name: "buildArrayExpressionLike",
    description: "Builds an `Expression` instance for filtering the provided keys LIKE the value provided.",
    params: [
      {
        name: "keys",
        type: "any[]",
        description: "the keys"
      },
      {
        name: "value",
        type: "any",
        description: "the value"
      }
    ],
    return: {
      name: "`Expression`",
      description: "the `Expression`"
    }
  },
  {
    name: "buildExpressionEquals",
    description: "Builds an `Expression` instance for filtering the provided key EQUAL to the provided value.",
    params: [
      {
        name: "key",
        type: "string",
        description: "the key"
      },
      {
        name: "value",
        type: "any",
        description: "the value"
      }
    ],
    return: {
      name: "`Expression`",
      description: "the `Expression`"
    }
  },
  {
    name: "buildExpressionIsNotNull",
    description: "Builds an `Expression` instance for filtering the provided key with a NOT NULL value.",
    params: [
      {
        name: "key",
        type: "string",
        description: "the key"
      }
    ],
    return: {
      name: "`Expression`",
      description: "the `Expression`"
    }
  },
  {
    name: "buildExpressionIsNull",
    description: "Builds an `Expression` instance for filtering the provided key with a NULL value.",
    params: [
      {
        name: "key",
        type: "string",
        description: "the key"
      }
    ],
    return: {
      name: "`Expression`",
      description: "the `Expression`"
    }
  },
  {
    name: "buildExpressionLess",
    description: "Builds an `Expression` instance for filtering the provided key LESS than the provided value.",
    params: [
      {
        name: "key",
        type: "string",
        description: "the key"
      },
      {
        name: "value",
        type: "any",
        description: "the value"
      }
    ],
    return: {
      name: "`Expression`",
      description: "the `Expression`"
    }
  },
  {
    name: "buildExpressionLessEqual",
    description: "Builds an `Expression` instance for filtering the provided key LESS OR EQUAL to the provided value.",
    params: [
      {
        name: "key",
        type: "string",
        description: "the key"
      },
      {
        name: "value",
        type: "any",
        description: "the value"
      }
    ],
    return: {
      name: "`Expression`",
      description: "the `Expression`"
    }
  },
  {
    name: "buildExpressionLike",
    description: "Builds an `Expression` instance for filtering the provided key LIKE the provided value.",
    params: [
      {
        name: "key",
        type: "string",
        description: "the key"
      },
      {
        name: "value",
        type: "any",
        description: "the value"
      }
    ],
    return: {
      name: "`Expression`",
      description: "the `Expression`"
    }
  },
  {
    name: "buildExpressionLikeEnd",
    description: "Builds an `Expression` instance for filtering the provided key ENDS LIKE the provided value.",
    params: [
      {
        name: "key",
        type: "string",
        description: "the key"
      },
      {
        name: "value",
        type: "any",
        description: "the value"
      }
    ],
    return: {
      name: "`Expression`",
      description: "the `Expression`"
    }
  },
  {
    name: "buildExpressionLikeStart",
    description: "Builds an `Expression` instance for filtering the provided key STARTS LIKE the provided value.",
    params: [
      {
        name: "key",
        type: "string",
        description: "the key"
      },
      {
        name: "value",
        type: "any",
        description: "the value"
      }
    ],
    return: {
      name: "`Expression`",
      description: "the `Expression`"
    }
  },
  {
    name: "buildExpressionMore",
    description: "Builds an `Expression` instance for filtering the provided key MORE than the provided value.",
    params: [
      {
        name: "key",
        type: "string",
        description: "the key"
      },
      {
        name: "value",
        type: "any",
        description: "the value"
      }
    ],
    return: {
      name: "`Expression`",
      description: "the `Expression`"
    }
  },
  {
    name: "buildExpressionMoreEqual",
    description: "Builds an `Expression` instance for filtering the provided key MORE OR EQUAL to the provided value.",
    params: [
      {
        name: "key",
        type: "string",
        description: "the key"
      },
      {
        name: "value",
        type: "any",
        description: "the value"
      }
    ],
    return: {
      name: "`Expression`",
      description: "the `Expression`"
    }
  },
  {
    name: "buildExpressionNotEquals",
    description: "Builds an `Expression` instance for filtering the provided key NOT EQUAL to the provided value.",
    params: [
      {
        name: "key",
        type: "string",
        description: "the key"
      },
      {
        name: "value",
        type: "any",
        description: "the value"
      }
    ],
    return: {
      name: "`Expression`",
      description: "the `Expression`"
    }
  },
  {
    name: "buildExpressionNotLike",
    description: "Builds an `Expression` instance for filtering the provided key NOT LIKE to the provided value.",
    params: [
      {
        name: "key",
        type: "string",
        description: "the key"
      },
      {
        name: "value",
        type: "any",
        description: "the value"
      }
    ],
    return: {
      name: "`Expression`",
      description: "the `Expression`"
    }
  },
  {
    name: "buildExpressionNullAndValue",
    description: "Builds an `Expression` instance for filtering the provided key with two conditions:
      * The first filter the provided key with a NULL value.
      * The second filter the provided key EQUAL to the provided value.

      Both expressions are joined using the provided operator.",
    params: [
      {
        name: "key",
        type: "string",
        description: "the key"
      },
      {
        name: "value",
        type: "any",
        description: "the value"
      }
    ],
    return: {
      name: "`Expression`",
      description: "the `Expression`"
    }
  },
  {
    name: "buildExpressionIn",
    description: "Builds an `Expression` instance for filtering the provided key IN the provided values.",
    params: [
      {
        name: "key",
        type: "string",
        description: "the key"
      },
      {
        name: "values",
        type: "any",
        description: "the values"
      }
    ],
    return: {
      name: "`Expression`",
      description: "the `Expression`"
    }
  }
]

utilityMethods: [
  {
    name: "buildBasicExpression",
    description: "Builds a `IBasicExpression` instance from the filtering expression (`Expression`) provided.",
    params: [
      {
        name: "exp",
        type: "`Expression`",
        description: "the filtering expression"
      }
    ],
    return: {
      name: "`BasicExpression`",
      description: "the basic expression"
    }
  },
  {
    name: "buildComplexExpression",
    description: "Builds a complex `Expression` instance joining two expressions with the provided operator.",
    params: [
      {
        name: "expr1",
        type: "`Expression`",
        description: "the first filtering expression to join"
      },
      {
        name: "expr2",
        type: "`Expression`",
        description: "the second filtering expression to join"
      },
      {
        name: "op",
        type: "string",
        description: "the joining operator"
      }
    ],
    return: {
      name: "`Expression`",
      description: "the complex filtering expression"
    }
  },
  {
    name: "buildExpressionFromObject",
    description: "Builds an `Expression` instance from the provided object.",
    params: [
      {
        name: "obj",
        type: "any",
        description: "the object"
      }
    ],
    return: {
      name: "`Expression`",
      description: "the `Expression`"
    }
  },
  {
    name: "buildFilterExpression",
    description: "Builds an `IFilterExpression` instance from the filtering expression (`Expression`) provided.",
    params: [
      {
        name: "exp",
        type: "`Expression`",
        description: "the filtering expression"
      }
    ],
    return: {
      name: "`IFilterExpression`",
      description: "the `IFilterExpression`"
    }
  },
  {
    name: "instanceofBasicExpression",
    description: "Evaluates if the the expression provided is an instance of `IBasicExpression`.",
    params: [
      {
        name: "exp",
        type: "`Expression`",
        description: "the filtering expression"
      }
    ],
    return: {
      name: "boolean",
      description: "`true` if the provided expression is an instance of `IBasicExpression`, `false` otherwise"
    }
  },
  {
    name: "instanceofExpression",
    description: "Evaluates if an expresion is instance of `Expression`.",
    params: [
      {
        name: "exp",
        type: "any",
        description: "the expression to evaluate"
      }
    ],
    return: {
      name: "boolean",
      description: "`true` if the provided expression is an instance of `Expression`, `false` otherwise"
    }
  },
  {
    name: "instanceofFilterExpression",
    description: "Evaluates if an expresion is instance of `IFilterExpression`.",
    params: [
      {
        name: "exp",
        type: "any",
        description: "the expression to evaluate"
      }
    ],
    return: {
      name: "boolean",
      description: "`true` if the provided expression is an instance of `IFilterExpression`, `false` otherwise"
    }
  }
]
