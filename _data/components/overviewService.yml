class: "OFormServiceComponent"

propertiesColumns: ["Name", "Type", "Description"]

properties: [{
  name: "elementRef",
  type: "property",
  description: "Name of the column"
}]

inheritedAttributes: [{
  component: "FormDataComponent",
  path: "components/input/overview/api",
  attributes: ["attr", "label", "tooltip", "tooltip-position", "tooltip-show-delay", "automatic-binding", "automatic-registering", "data", "enabled", "required", "clear-button", "sql-type", "width", "read-only", "validators", "label-visible", "hide-required-marker","select-all-on-click"]
}]

inheritedOutputs: [{
  component: "FormDataComponent",
  path: "components/input/overview/api",
  outputs: ["onChange", "onValueChange"]
}]

attributes: [{
  name: "static-data"
},{
  name: "entity"
},{
  name: "service"
},{
  name: "columns"
},{
  name: "value-column"
},{
  name: "value-column-type"
},{
  name: "parent-keys",
  type: "string",
  default: "",
  required: "",
  description: "Filtering keys. Separated by ';'. It is possible to use alias on the following way: compCol1:fk1;compCol2:fk2 where compCol1 and compCol2 are component columns and fk1 and fk2 are attributes from form fields.
  It is also possible to define a column next to the alias for getting that column value instead of the component value: compCol1:fk1[fkCol]"
},{
  name: "visible-columns",
  type: "string",
  default: "",
  required: "",
  description: "Visible columns. Separated by ';'"
},{
  name: "description-columns"
},{
  name: "separator"
},{
  name: "query-on-init"
},{
  name: "query-on-bind"
},{
  name: "query-on-event"
},{
  name: "query-method"
},{
  name: "service-type"
},{
  name: "query-with-null-parent-keys"
},{
  name: "set-value-on-value-change",
  type: "string",
  default: "",
  required: "",
  description: "Form component attributes whose value will be set when the value of the current component changes due to user interaction. Separated by ';'. Accepted format: `attr | attr:columnName`"
},{
  name: "translate",
  type: "yes | no | true | false",
  default: "no",
  required: "",
  description: "Indicates whether or not to translate the option values"
}, {
  name: "sort",
  type: "ASC | DESC",
  default: "",
  required: "",
  description: "Indicates the order ascending or descending of the option values"
}]

outputs: [{
  name: "onSetValueOnValueChange",
  description: "Event triggered when component value changes due to user interaction"
}]

methods: [{
  name: "getSelectedRecord",
  type: "method",
  description: "Returns the data related to the selected item."
}]
